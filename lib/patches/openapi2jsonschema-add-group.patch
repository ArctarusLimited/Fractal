diff --git a/openapi2jsonschema/command.py b/openapi2jsonschema/command.py
index 9cd1bfc..89c34db 100644
--- a/openapi2jsonschema/command.py
+++ b/openapi2jsonschema/command.py
@@ -37,9 +37,6 @@ from openapi2jsonschema.errors import UnsupportedError
 @click.option(
     "--stand-alone", is_flag=True, help="Whether or not to de-reference JSON schemas"
 )
-@click.option(
-    "--expanded", is_flag=True, help="Expand Kubernetes schemas by API version"
-)
 @click.option(
     "--kubernetes", is_flag=True, help="Enable Kubernetes specific processors"
 )
@@ -49,7 +46,7 @@ from openapi2jsonschema.errors import UnsupportedError
     help="Prohibits properties not in the schema (additionalProperties: false)",
 )
 @click.argument("schema", metavar="SCHEMA_URL")
-def default(output, schema, prefix, stand_alone, expanded, kubernetes, strict):
+def default(output, schema, prefix, stand_alone, kubernetes, strict):
     """
     Converts a valid OpenAPI specification into a set of JSON Schema files
     """
@@ -96,7 +93,7 @@ def default(output, schema, prefix, stand_alone, expanded, kubernetes, strict):
                     type_def = definitions[type_name]
                     if "x-kubernetes-group-version-kind" in type_def:
                         for kube_ext in type_def["x-kubernetes-group-version-kind"]:
-                            if expanded and "apiVersion" in type_def["properties"]:
+                            if "apiVersion" in type_def["properties"]:
                                 api_version = (
                                     kube_ext["group"] + "/" +
                                     kube_ext["version"]
@@ -127,87 +124,101 @@ def default(output, schema, prefix, stand_alone, expanded, kubernetes, strict):
         components = data["components"]["schemas"]
 
     for title in components:
-        kind = title.split(".")[-1].lower()
-        if kubernetes:
-            group = title.split(".")[-3].lower()
-            api_version = title.split(".")[-2].lower()
         specification = components[title]
         specification["$schema"] = "http://json-schema.org/schema#"
         specification.setdefault("type", "object")
+        subresources = []
 
-        if strict:
-            specification["additionalProperties"] = False
-
-        if kubernetes and expanded:
-            if group in ["core", "api"]:
-                full_name = "%s-%s" % (kind, api_version)
-            else:
-                full_name = "%s-%s-%s" % (kind, group, api_version)
+        if kubernetes:
+            gvks = components[title].get("x-kubernetes-group-version-kind")
+            if not gvks:
+                continue
+
+            for gvk in gvks:
+                gvk_group = gvk["group"].lower()
+                gvk_version = gvk["version"].lower()
+                gvk_kind = gvk["kind"].lower()
+                if gvk_group == "":
+                    subresources.append({
+                        "kubernetes_gvk": gvk,
+                        "full_name": f"{gvk_kind}-{gvk_version}",
+                    })
+                else:
+                    subresources.append({
+                        "kubernetes_gvk": gvk,
+                        "full_name": f"{gvk_kind}-{gvk_group}-{gvk_version}",
+                    })
         else:
-            full_name = kind
+            kind_temp = title.split(".")[-1].lower()
+            subresources.append({"full_name": kind_temp})
 
+        if strict:
+            specification["additionalProperties"] = False
         types.append(title)
 
-        try:
-            debug("Processing %s" % full_name)
-
-            # These APIs are all deprecated
-            if kubernetes:
-                if title.split(".")[3] == "pkg" and title.split(".")[2] == "kubernetes":
-                    raise UnsupportedError(
-                        "%s not currently supported, due to use of pkg namespace"
-                        % title
-                    )
-
-            # This list of Kubernetes types carry around jsonschema for Kubernetes and don't
-            # currently work with openapi2jsonschema
-            if (
-                kubernetes
-                and stand_alone
-                and kind
-                in [
-                    "jsonschemaprops",
-                    "jsonschemapropsorarray",
-                    "customresourcevalidation",
-                    "customresourcedefinition",
-                    "customresourcedefinitionspec",
-                    "customresourcedefinitionlist",
-                    "customresourcedefinitionspec",
-                    "jsonschemapropsorstringarray",
-                    "jsonschemapropsorbool",
-                ]
-            ):
-                raise UnsupportedError("%s not currently supported" % kind)
-
-            updated = change_dict_values(specification, prefix, version)
-            specification = updated
-
-            if stand_alone:
-                base = "file://%s/%s/" % (os.getcwd(), output)
-                specification = JsonRef.replace_refs(
-                    specification, base_uri=base)
-
-            if "additionalProperties" in specification:
-                if specification["additionalProperties"]:
-                    updated = change_dict_values(
-                        specification["additionalProperties"], prefix, version
-                    )
-                    specification["additionalProperties"] = updated
-
-            if strict and "properties" in specification:
-                updated = additional_properties(specification["properties"])
-                specification["properties"] = updated
-
-            if kubernetes and "properties" in specification:
-                updated = replace_int_or_string(specification["properties"])
-                updated = allow_null_optional_fields(updated)
-                specification["properties"] = updated
-
-            with open("%s/%s.json" % (output, full_name), "w") as schema_file:
-                debug("Generating %s.json" % full_name)
-                schema_file.write(json.dumps(specification, indent=2))
-        except Exception as e:
-            error("An error occured processing %s: %s" % (kind, e))
+        for subresource in subresources:
+            full_name = subresource["full_name"]
+
+            try:
+                debug("Processing %s" % full_name)
+
+                # These APIs are all deprecated
+                if kubernetes:
+                    if title.split(".")[3] == "pkg" and title.split(".")[2] == "kubernetes":
+                        raise UnsupportedError(
+                            "%s not currently supported, due to use of pkg namespace"
+                            % title
+                        )
+
+                # This list of Kubernetes types carry around jsonschema for Kubernetes and don't
+                # currently work with openapi2jsonschema
+                if (
+                    kubernetes
+                    and stand_alone
+                    and subresource["kubernetes_gvk"]["kind"]
+                    in [
+                        "jsonschemaprops",
+                        "jsonschemapropsorarray",
+                        "customresourcevalidation",
+                        "customresourcedefinition",
+                        "customresourcedefinitionspec",
+                        "customresourcedefinitionlist",
+                        "customresourcedefinitionspec",
+                        "jsonschemapropsorstringarray",
+                        "jsonschemapropsorbool",
+                    ]
+                ):
+                    raise UnsupportedError("%s not currently supported" % subresource["kubernetes_gvk"]["kind"])
+
+                updated = change_dict_values(specification, prefix, version)
+                specification = updated
+
+                if stand_alone:
+                    base = "file://%s/%s/" % (os.getcwd(), output)
+                    specification = JsonRef.replace_refs(
+                        specification, base_uri=base)
+
+                if "additionalProperties" in specification:
+                    if specification["additionalProperties"]:
+                        updated = change_dict_values(
+                            specification["additionalProperties"], prefix, version
+                        )
+                        specification["additionalProperties"] = updated
+
+                if strict and "properties" in specification:
+                    updated = additional_properties(specification["properties"])
+                    specification["properties"] = updated
+
+                if kubernetes and "properties" in specification:
+                    updated = replace_int_or_string(specification["properties"])
+                    updated = allow_null_optional_fields(updated)
+                    specification["properties"] = updated
+
+                with open("%s/%s.json" % (output, full_name), "w") as schema_file:
+                    debug("Generating %s.json" % full_name)
+                    schema_file.write(json.dumps(specification, indent=2))
+            except Exception as e:
+                error("An error occured processing %s: %s" % (full_name, e))
 
     with open("%s/all.json" % output, "w") as all_file:
         info("Generating schema for all types")
